import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.JFrame;
import javax.swing.plaf.synth.SynthStyle;

public class Test_main {
    static double round(double wert){
		double erg=Math.round(wert*Math.pow(10,6))/Math.pow(10, 6);;
		return erg;
	}
	public static void main(String[]args) throws Exception {
	
		
		/* public double getDuration() {
		    	totalduration=0;
		    	EA.IntersectionValue=0;
		    	EA.allsymmValue=0;
			
		    	//Calculation of duration in dynamic environment
		    	if(Run.runs==true) {
		    		int hour= EA.lastEventTime.getHour();
		        	long nexthour=EA.lastEventTime.timeAtNextHour;
		        	long sumMilli=EA.lastEventTime.startInMilli;
		        	int h_next;
		    		int index=1;
			    	
			    	totalduration =EA.toDrivetoCity+EA.toDrivetoIntersection;
			    	
			    	
			    	sumMilli+=totalduration*1000;
			    	
			    	if(sumMilli>nexthour) { //Annahme nich größer als 60 min;
			    		hour++;
			    		nexthour+=3600000;	
			    	}	
			    	if(hour==24) {
						hour=0;
					}
			    	if(hour==23) {
						h_next=0;
					}
					else {
						h_next=hour+1;
					}
			    	/*System.out.println(this);
			    	System.out.print("tDtC: "+EA.toDrivetoCity+" ");
			    	System.out.print("tdtI: "+EA.toDrivetoIntersection+" ");
			    //	System.out.print("  ttnh: "+ttnh+ " hour : "+ hour);
			    	
			    	// If situation requires a value of the "Intersection" matrix range
			    	if(EA.OP_Stop==false&&this.getCity(1).getType()=="Intersection") {
			    		//Get ID for selecting correct value in intersection matrix range
			    		int a=Integer.parseInt(this.getCity(2).getId());
			    		//toDriveto Calculation
						//check for hour overlaps and calculate duration by ratios
						 if(sumMilli+Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a]*1000>nexthour) {
		 						long houroverlaps=(long)(sumMilli+Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a]*1000-nexthour);						//	System.out.print(" tohour: "+tohour);
		 						double houroverlapsratio= Maths.round(houroverlaps/(Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a]*1000),5);									// Calculate ratio of driven way in this sectio						//System.out.print(" hourratio: "+hourratio);
		    					totalduration+=(1-houroverlapsratio)*Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a]+(houroverlapsratio)*Distanzmatrix.allMatrix.get(h_next)[EA.numOfCities][a];		//multiply ratio with value*factor of past hour and the reverse ratio with the value*factor of upcoming hour
		    					EA.IntersectionValue=totalduration+Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a];	
		    					sumMilli+=(1-houroverlapsratio)*Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a]*1000+(1-houroverlapsratio)*Distanzmatrix.allMatrix.get(h_next)[EA.numOfCities][a];
		    					nexthour+=3600000;
								hour+=1;
								if(hour==24) {
									hour=0;
								}
								if(hour==23) {
									h_next=0;
								}
								else {
									h_next=hour+1;
								}
							
							}
						 //add hour value to totalduration
							else {
								
								totalduration+=Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a];	
								EA.IntersectionValue+=Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a];	
								sumMilli+=Distanzmatrix.allMatrix.get(hour)[EA.numOfCities][a]*1000;	
							
							}
						
			    	}
			    	if(EA.lastCityvisited==false) {
			    	//Set index for calculation of duration of remaining cities
			    	if(this.getCity(1).getType()=="Intersection") {
			    		index=2;
			    	}
			    	else if(this.getCity(1).getType()=="City") {
			    		index=1;
			    	}
			    
			    	
			    	//Calculation hour depending duration of remaining cities
			    	// and back to city we've started from
			    	for (int cityIndex=index; cityIndex < tourSize(); cityIndex++) { 		//city index noch falsch
					
			    		City fromCity = getCity(cityIndex);
						 City destinationCity;	
						 if(cityIndex+1 < tourSize()){   
							 destinationCity = getCity(cityIndex+1);
			            } 
			            else{    	 
			                destinationCity = Distanzmatrix.startCity;
			            }
							
						int a = Integer.parseInt(fromCity.getId());
						int b = Integer.parseInt(destinationCity.getId());
						
						int checkrounds = (Distanzmatrix.allMatrix.get(hour)[a][b]*1000)%3600000;
						// hour-depending calculation of duration
						if(sumMilli+Distanzmatrix.allMatrix.get(hour)[a][b]*1000>nexthour) {
							long houroverlaps=(long)(sumMilli+Distanzmatrix.allMatrix.get(hour)[a][b]*1000-nexthour);						//	System.out.print(" tohour: "+tohour);
							double houroverlapsratio= Maths.round(houroverlaps/(Distanzmatrix.allMatrix.get(hour)[a][b]*1000),5);									// Calculate ratio of driven way in this sectio						//System.out.print(" hourratio: "+hourratio);
							totalduration+=(1-houroverlapsratio)*Distanzmatrix.allMatrix.get(hour)[a][b]+(houroverlapsratio)*Distanzmatrix.allMatrix.get(h_next)[a][b];		//multiply ratio with value*factor of past hour and the reverse ratio with the value*factor of upcoming hour
							sumMilli+=(1-houroverlapsratio)*Distanzmatrix.allMatrix.get(hour)[a][b]*1000+(1-houroverlapsratio)*Distanzmatrix.allMatrix.get(h_next)[a][b];
							nexthour+=3600000;
							hour+=1;
							EA.allsymmValue+=Distanzmatrix.allMatrix.get(hour)[a][b];	
			
							if(hour==24) {
								hour=0;
							}
							if(hour==23) {
								h_next=0;
							}
							else {
								h_next=hour+1;
							}
						
						}
						else {
							
							totalduration+=Distanzmatrix.allMatrix.get(hour)[a][b];	
							sumMilli+=Distanzmatrix.allMatrix.get(hour)[a][b]*1000;	
							EA.allsymmValue+=Distanzmatrix.allMatrix.get(hour)[a][b];	
						}
						
			    	}
			    	}
			    	totalduration=Maths.round(totalduration, 3);
			    	return totalduration;
		    	}
		    	//HIER FEHLT NOCH ZEITABHÄNGIGKEIT
		    	//Calculation of duration in static environment, just city objects of type "City"
		    	else {
		    		double[][] matrix =Distanzmatrix.matrix;
		   		 for (int cityIndex=0; cityIndex < tourSize(); cityIndex++) { 		
		   			 City fromCity = getCity(cityIndex);
		   			 City destinationCity;	  	
		   			 if(cityIndex+1 < tourSize()){
		                   
		   				 destinationCity = getCity(cityIndex+1);
		   			 }
		                else{    	 
		                    destinationCity = Distanzmatrix.startCity;
		                } 
		   			 int a = Integer.parseInt(fromCity.getId());
		   			 int b = Integer.parseInt(destinationCity.getId());
		   			 totalduration+=matrix[a][b];	
		   		 }
		   	totalduration= Maths.round(totalduration,3);
		   	return totalduration;  	
		    	}
		    }

		*/
		double a=54.2;
		double hour= 3600;
		double x= 54.32+3600;		
				if(x/a<=1) {	//DIESEM MIT DRATIONS VALUE
					System.out.println("no overlaps");
				}
				else {
					double overlaps=x-a;
					if(overlaps%hour==0) {		///DIESEN ABGLEICH MIT 3600
					System.out.println("aRounds:"+( (int)(overlaps/hour)));
					}
					else {
						System.out.println("bRounds"+ (int)((overlaps/hour)+1));
					}
				}
			
		
	}}
		
/*
		TimeElement t= new TimeElement(System.currentTimeMillis()-1000);
		
		System.out.println(t.getHour());
		
		System.out.println();
		City c0= new City("0", "City", 8.390409,49.013296);
		City c1= new City("1", "City", 8.391630,49.014276);
		City c2= new City("2", "City", 8.334120,49.014376);
		City n1= new City("14795415","Node",8.3903420, 49.0127410);
		City n2= new City("25947870","Node", 8.3904210,49.0134581);
		City n3= new City("4935288158","Node", 8.3904480,49.0137314);
		ArrayList<City>beste=new ArrayList<City>();
		beste.add(c0);
		beste.add(c1);
		beste.add(c2);
		beste.add(n1);
		ArrayList<City>vh=new ArrayList<City>();
		vh.add(c0);
		vh.add(c1);
		vh.add(c2);
		vh.add(n1);
		Tour t1= new Tour(beste);
		Tour t2= new Tour(t1);
		if(t1.getCity(1)==t2.getCity(1)) {
			System.out.println("==");
		}
		else {
			System.out.println("NO ==");
		}
		if(t1.getCity(1).getId().equals(t2.getCity(1).getId())) {
			System.out.println("equals");
		}
		else {
			System.out.println("NO equals");
		}
	}
		
		
		
		
		
		
		
		
		
	/*	System.out.println(Maths.getFaktor(1));
		
		City lastlocation = new City("20", "GPS",8.3903420, 49.0127410);
		City c0= new City("0", "City", 8.390409,49.013296);
		City c1= new City("1", "City", 8.391630,49.014276);
		City c2= new City("2", "City", 8.334120,49.014376);
		All_Cities.addCity(c0);
		All_Cities.addCity(c1);
		All_Cities.addCity(c2);
		All_Cities.addCity(lastlocation);

		ArrayList<City>Nodes= new ArrayList<City>();
		int GPSinNode=0;
		
		double toDrivetoIntersection=0;
		double toDrivetoCity=0;
		double toDrivetoNode=0;
		TimeElement lastEventTime= new TimeElement();
		int hour= lastEventTime.getHour();																//current hour
		double ttnh=lastEventTime.getTimeToNextHour();
		City n1= new City("14795415","Node",8.3903420, 49.0127410);
		City n2= new City("25947870","Node", 8.3904210,49.0134581);
		City n3= new City("4935288158","Node", 8.3904480,49.0137314);
		City n4= new City("4935288181","Node", 8.3904717,49.0139720);
		City n5= new City("1719671859","Node",8.3905241,49.0144687);
		City n6= new City("14795418","Node", 8.3905318,49.0145414);
		City n7= new City("25948133","Node", 8.3916510,49.0144975);
		City n8= new City("1719671856","Node", 8.3916443,49.0144270);
		City n9= new City("4224766861","Node", 8.3916187,49.0141004);
		Nodes.add(n1);
		Nodes.add(n2);
		Nodes.add(n3);
		Nodes.add(n4);
		Nodes.add(n5);
		Nodes.add(n6);
		Nodes.add(n7);
		Nodes.add(n8);
		Nodes.add(n9);
		ArrayList<City>Intersections= new ArrayList<City>();
		City i1= new City("0", "City", 8.390403,49.013296);
		City i2= new City("25947870", "Intersection", 8.390421,49.013458);
		City i3= new City("14795418", "Intersection", 8.390532,49.014541);
		City i4= new City("25948133", "Intersection", 8.391651,49.014498);
		City i5= new City("1", "City", 8.391632,49.014276);
		Intersections.add(i1);
		Intersections.add(i2);
		Intersections.add(i3);
		Intersections.add(i4);
		Intersections.add(i5);
		ArrayList<City>beste=new ArrayList<City>();
		beste.add(lastlocation);
		beste.add(c0);
		beste.add(c1);
		beste.add(c2);
		ArrayList<City>laste=new ArrayList<City>();
		laste.add(lastlocation);
		laste.add(c0);
		laste.add(c1);
		laste.add(i5);
		Tour best= new Tour(beste);
		Tour last =new Tour(laste);
		System.out.println(best.checkforOrder(last));*/
	/*double durations[]= {204.84,46.6,42,85.3,144.2,27.4,81.1,122.3};
		double lat_ratio_start=(Nodes.get(1).getLatitude()-Intersections.get(0).getLatitude())/(Nodes.get(1).getLatitude()-Nodes.get(0).getLatitude());	
		double lon_ratio_start=(Nodes.get(1).getLongitude()-Intersections.get(0).getLongitude())/(Nodes.get(1).getLongitude()-Nodes.get(0).getLongitude());
		double avg_ratio_start= (lat_ratio_start+lon_ratio_start)/2;  
		durations[0]=durations[0]*avg_ratio_start;
		
		double lat_ratio_end=(Nodes.get(Nodes.size()-1).getLatitude()-Intersections.get(Intersections.size()-1).getLatitude())/(Nodes.get(Nodes.size()-1).getLatitude()-Nodes.get(Nodes.size()-2).getLatitude());	
		double lon_ratio_end=(Nodes.get(Nodes.size()-1).getLongitude()-Intersections.get(Intersections.size()-1).getLongitude())/(Nodes.get(Nodes.size()-1).getLongitude()-Nodes.get(Nodes.size()-2).getLongitude());
		double avg_ratio_end= (lat_ratio_end+lon_ratio_end)/2;
		durations[durations.length-1]=durations[durations.length-1]*avg_ratio_end;			
		
		int pos = All_Cities.destinationCities.indexOf(best.getCity(2));
		All_Cities.getCity(pos).setCoordinates(Intersections.get(Intersections.size()-1).getLongitude(), Intersections.get(Intersections.size()-1).getLatitude());		
		
		Nodes.set(0, Intersections.get(0)); 
		Nodes.set(Nodes.size()-1, Intersections.get(Intersections.size()-1));
		
		best.deleteCity(0);
		if(Intersections.get(1).getType()=="Intersection") {
			best.addatPosition(1, Intersections.get(1));
		}
		
		//delete last location in All_Cities
		All_Cities.deleteCity(lastlocation);
		//Insert next "intersection" if available and do a matrix update for next intersection
		if(Intersections.get(1).getType()=="Intersection"){
			All_Cities.addCity(Intersections.get(1));
			int PosinNode=0;
			for(int a=0; a<Nodes.size();a++) {
				if(Nodes.get(a).getId()==Intersections.get(1).getId()) {
					break;
				}
				PosinNode++;
			}
			for(int n=0;n<PosinNode;n++) {
				if(toDrivetoIntersection+durations[n]*Maths.getFaktor(hour)>ttnh) {
		    		int h_next;
					if(hour==23) {
						h_next=0;
					}
					else {
						h_next=hour+1;
					}
		    		double tohour=ttnh-durations[n]*Maths.getFaktor(hour);		;									//calculate the time from sum to next hour
					double hourratio= tohour/durations[n]*Maths.getFaktor(hour);									// Calculate ratio of driven way in this section
					toDrivetoIntersection+=hourratio*durations[n]*Maths.getFaktor(hour)+(1-hourratio)*durations[n]*Maths.getFaktor(h_next);		//multiply ratio with value*factor of past hour and the reverse ratio with the value*factor of upcoming hour
					ttnh+=3600;	
					hour+=1;
					if(hour==24) {
						hour=0;
					}
				
				}
				else {
					toDrivetoIntersection+=durations[n]*Maths.getFaktor(hour);
				}
			}
		System.out.println("best: "+best);
		System.out.println("todrivetointersection: "+toDrivetoIntersection);

		for(int f=0;f<durations.length;f++) {
			System.out.print(durations[f]+" ");
		}
		System.out.println();
		for(int g=0;g<All_Cities.numberOfCities();g++) {
			System.out.println(All_Cities.getCity(g));
		}
	
		
		double[][] arr= {{0.0,206.3,325.4,453.5,269.8,245.8,319.7,321.2,284.6,418.2,630.6,828.2,0.0,206.3,325.4,453.5,269.8,245.8,319.7,321.2,284.6,418.2,630.6,828.2,552.6,582.1,758.4,607.2,604.1,433.8,817.3,853.6,732.6,866.2,721.3,703.7,987.9,1027.9,637.0,398.9,497.6,437.0,241.7,418.2,525.4,550.8,704.4,224.3,281.8,236.8,293.0,316.8,132.7,294.1,360.2,392.3,274.0,267.9,350.4,310.9,284.0,284.0,410.5,437.7,372.9,321.4,607.3,658.5,998.2,1030.2,1220.9,871.2,1014.7,918.1,848.2,1633.3,1418.3,1579.2,623.2,374.4,773.4,0.0},
				{239.2,0.0,360.3,512.1,409.3,376.9,114.1,233.7,375.3,349.5,611.4,783.7,239.2,0.0,360.3,512.1,409.3,376.9,114.1,233.7,375.3,349.5,611.4,783.7,693.6,575.7,714.8,426.8,523.8,227.5,611.0,647.3,638.5,772.1,627.2,609.6,959.7,983.4,776.5,538.4,567.7,495.6,446.1,349.5,319.1,344.5,498.1,192.6,141.9,231.7,399.0,356.3,333.2,299.7,397.5,450.9,67.7,223.3,225.8,442.0,425.0,425.0,429.2,558.0,504.0,289.6,748.3,799.5,1139.2,1105.7,1280.1,826.7,970.2,824.0,767.9,1525.0,1373.8,1534.7,681.8,451.3,749.9,0.0},
				{353.1,341.2,0.0,360.2,365.7,527.7,348.8,384.3,539.3,500.1,490.1,687.7,353.1,341.2,0.0,360.2,365.7,527.7,348.8,384.3,539.3,500.1,490.1,687.7,782.7,726.3,865.4,601.9,698.9,402.6,663.1,691.0,559.3,692.9,548.0,530.4,847.4,887.4,686.9,448.8,452.3,350.7,471.8,500.1,494.2,252.0,405.6,263.8,291.3,418.3,283.6,118.9,324.8,194.4,167.2,273.4,325.0,414.2,376.4,574.8,514.1,514.1,579.8,708.6,622.0,249.9,837.4,888.6,1095.2,990.3,1181.0,730.7,874.2,744.8,943.0,1675.6,1277.8,1438.7,566.4,601.9,631.7,0.0},
				{406.8,408.4,289.6,0.0,224.2,470.5,519.7,521.2,600.5,692.2,414.1,611.7,406.8,408.4,289.6,0.0,224.2,470.5,519.7,521.2,600.5,692.2,414.1,611.7,698.8,918.4,1048.6,815.8,884.5,635.9,741.4,769.3,583.6,717.2,572.3,554.7,771.4,811.4,420.5,226.5,182.4,110.3,495.1,692.2,727.5,525.8,598.0,317.5,400.1,472.0,144.4,281.0,348.1,258.3,207.9,198.2,434.3,467.9,550.4,490.9,430.2,430.2,751.2,651.1,538.1,303.6,753.5,774.1,825.3,720.4,911.1,654.7,798.2,769.1,1128.6,1867.7,1201.8,1362.7,296.5,715.1,471.1,0.0},
				{269.8,379.5,314.2,303.2,0.0,264.5,492.9,494.4,457.8,591.4,520.0,717.6,269.8,379.5,314.2,303.2,0.0,264.5,492.9,494.4,457.8,591.4,520.0,717.6,492.8,720.7,931.6,780.4,777.3,607.0,819.3,847.2,661.5,795.1,650.2,632.6,877.3,917.3,378.0,139.9,238.6,297.1,316.1,591.4,698.6,550.0,675.9,342.1,424.7,410.0,169.0,305.6,272.9,282.9,285.8,281.7,447.2,441.1,523.6,284.9,224.2,224.2,549.1,445.1,332.1,328.2,547.5,598.7,879.8,774.9,965.6,760.6,904.1,847.0,1021.4,1806.5,1307.7,1468.6,382.3,513.0,556.9,0.0},
				{226.7,312.8,455.0,561.6,269.2,0.0,426.2,427.7,391.1,524.7,760.2,957.8,226.7,312.8,455.0,561.6,269.2,0.0,426.2,427.7,391.1,524.7,760.2,957.8,486.9,651.8,864.9,713.7,710.6,540.3,923.8,960.1,862.2,995.8,850.9,833.3,1117.5,1157.5,636.4,398.3,497.0,555.5,298.2,524.7,631.9,657.3,810.9,330.8,388.3,343.3,422.6,446.4,262.3,423.7,489.8,521.9,380.5,374.4,456.9,149.1,215.5,215.5,480.2,324.1,211.1,427.9,541.6,592.8,932.5,964.5,1155.2,1000.8,1144.3,1047.7,954.7,1739.8,1547.9,1708.8,640.7,444.1,815.3,0.0},
				{319.0,135.5,363.7,591.6,489.1,456.7,0.0,238.7,393.7,354.5,616.4,788.7,319.0,135.5,363.7,591.6,489.1,456.7,0.0,238.7,393.7,354.5,616.4,788.7,773.4,580.7,719.8,431.8,528.8,232.5,616.0,652.3,643.5,777.1,632.2,614.6,964.7,988.4,856.3,618.2,647.2,575.1,525.9,354.5,324.1,349.5,503.1,272.1,216.6,258.4,478.5,419.3,412.7,379.2,452.6,495.4,155.0,250.0,230.8,521.8,504.8,504.8,434.2,563.0,583.8,369.1,817.4,868.6,1208.3,1185.2,1285.1,831.7,975.2,829.0,772.9,1530.0,1378.8,1539.7,761.3,456.3,754.9,0.0},
				{340.8,259.6,401.0,620.8,508.6,474.5,267.2,0.0,214.0,191.6,614.4,786.7,340.8,259.6,401.0,620.8,508.6,474.5,267.2,0.0,214.0,191.6,614.4,786.7,680.1,417.8,548.0,315.2,383.9,252.1,635.6,671.9,641.5,775.1,630.2,612.6,962.7,986.4,821.5,637.7,676.4,604.3,537.8,191.6,343.7,347.5,501.1,301.3,323.4,174.4,507.7,456.6,441.9,408.4,489.9,493.4,279.1,92.6,49.8,539.6,524.3,524.3,271.3,400.1,544.2,398.3,654.5,705.7,1045.4,1077.4,1268.1,829.7,973.2,827.0,628.0,1367.1,1376.8,1537.7,790.5,293.4,752.9,0.0},
				{310.2,351.3,534.5,681.7,480.3,447.9,436.3,203.7,0.0,192.1,797.5,969.8,310.2,351.3,534.5,681.7,480.3,447.9,436.3,203.7,0.0,192.1,797.5,969.8,668.9,408.4,532.3,381.1,378.0,435.2,818.7,855.0,824.6,958.2,813.3,795.7,1145.8,1169.5,810.3,609.4,708.1,665.2,513.1,192.1,526.8,530.6,684.2,362.1,419.6,236.3,568.6,525.9,419.3,469.3,567.1,620.5,419.0,193.2,232.9,513.0,496.0,496.0,260.4,340.3,484.4,459.2,643.3,694.5,1034.2,1066.2,1256.9,1012.8,1156.3,1010.1,622.1,1407.2,1559.9,1720.8,851.4,281.0,936.0,0.0},
				{418.7,386.2,527.6,764.8,588.3,554.2,393.8,207.1,246.3,0.0,741.0,913.3,418.7,386.2,527.6,764.8,588.3,554.2,393.8,207.1,246.3,0.0,741.0,913.3,628.5,288.1,405.3,409.4,406.3,378.7,762.2,798.5,768.1,901.7,756.8,739.2,1089.3,1113.0,769.9,717.4,816.1,752.4,617.5,0.0,470.3,474.1,627.7,449.4,467.1,322.5,655.8,583.2,527.8,556.5,616.5,620.0,405.7,240.7,181.3,619.3,604.0,604.0,219.7,367.1,503.9,546.4,602.9,654.1,993.8,1025.8,1216.5,956.3,1099.8,953.6,650.4,1294.1,1503.4,1664.3,938.6,241.8,879.5,0.0},
				{658.2,554.9,451.7,337.9,477.9,724.2,562.5,598.0,753.0,713.8,0.0,329.1,658.2,554.9,451.7,337.9,477.9,724.2,562.5,598.0,753.0,713.8,0.0,329.1,952.5,940.0,1079.1,815.6,903.2,616.3,650.3,678.2,476.8,578.2,491.7,292.7,582.3,575.5,658.3,464.3,420.2,325.3,746.5,713.8,667.2,501.8,506.9,568.9,551.6,713.4,395.8,526.9,599.5,509.7,356.2,251.3,574.4,631.6,590.1,744.6,683.9,683.9,793.5,904.8,791.8,555.0,999.3,1011.9,1063.1,958.2,872.2,439.9,583.4,664.7,1038.8,1889.3,996.4,1157.3,534.3,815.6,372.5,0.0},
				{889.4,759.9,682.8,586.2,726.2,972.5,767.5,803.0,958.0,918.8,329.7,0.0,889.4,759.9,682.8,586.2,726.2,972.5,767.5,803.0,958.0,918.8,329.7,0.0,1200.8,1145.0,1284.1,1020.6,1108.2,821.3,855.3,883.2,558.9,660.3,582.4,381.2,596.2,508.3,766.0,712.6,668.5,573.6,977.7,918.8,872.2,706.8,711.9,800.1,756.6,918.4,644.1,743.7,830.7,740.9,587.3,499.6,779.4,836.6,795.1,992.9,932.2,932.2,998.5,1127.3,1040.1,786.2,1107.0,1119.6,1170.8,944.5,805.0,372.7,516.2,694.5,1243.8,2094.3,1119.2,1280.1,620.3,1020.6,386.4,0.0},
				{0.0,206.3,325.4,453.5,269.8,245.8,319.7,321.2,284.6,418.2,630.6,828.2,0.0,206.3,325.4,453.5,269.8,245.8,319.7,321.2,284.6,418.2,630.6,828.2,552.6,582.1,758.4,607.2,604.1,433.8,817.3,853.6,732.6,866.2,721.3,703.7,987.9,1027.9,637.0,398.9,497.6,437.0,241.7,418.2,525.4,550.8,704.4,224.3,281.8,236.8,293.0,316.8,132.7,294.1,360.2,392.3,274.0,267.9,350.4,310.9,284.0,284.0,410.5,437.7,372.9,321.4,607.3,658.5,998.2,1030.2,1220.9,871.2,1014.7,918.1,848.2,1633.3,1418.3,1579.2,623.2,374.4,773.4,0.0},
				{239.2,0.0,360.3,512.1,409.3,376.9,114.1,233.7,375.3,349.5,611.4,783.7,239.2,0.0,360.3,512.1,409.3,376.9,114.1,233.7,375.3,349.5,611.4,783.7,693.6,575.7,714.8,426.8,523.8,227.5,611.0,647.3,638.5,772.1,627.2,609.6,959.7,983.4,776.5,538.4,567.7,495.6,446.1,349.5,319.1,344.5,498.1,192.6,141.9,231.7,399.0,356.3,333.2,299.7,397.5,450.9,67.7,223.3,225.8,442.0,425.0,425.0,429.2,558.0,504.0,289.6,748.3,799.5,1139.2,1105.7,1280.1,826.7,970.2,824.0,767.9,1525.0,1373.8,1534.7,681.8,451.3,749.9,0.0},
				{353.1,341.2,0.0,360.2,365.7,527.7,348.8,384.3,539.3,500.1,490.1,687.7,353.1,341.2,0.0,360.2,365.7,527.7,348.8,384.3,539.3,500.1,490.1,687.7,782.7,726.3,865.4,601.9,698.9,402.6,663.1,691.0,559.3,692.9,548.0,530.4,847.4,887.4,686.9,448.8,452.3,350.7,471.8,500.1,494.2,252.0,405.6,263.8,291.3,418.3,283.6,118.9,324.8,194.4,167.2,273.4,325.0,414.2,376.4,574.8,514.1,514.1,579.8,708.6,622.0,249.9,837.4,888.6,1095.2,990.3,1181.0,730.7,874.2,744.8,943.0,1675.6,1277.8,1438.7,566.4,601.9,631.7,0.0},
				{406.8,408.4,289.6,0.0,224.2,470.5,519.7,521.2,600.5,692.2,414.1,611.7,406.8,408.4,289.6,0.0,224.2,470.5,519.7,521.2,600.5,692.2,414.1,611.7,698.8,918.4,1048.6,815.8,884.5,635.9,741.4,769.3,583.6,717.2,572.3,554.7,771.4,811.4,420.5,226.5,182.4,110.3,495.1,692.2,727.5,525.8,598.0,317.5,400.1,472.0,144.4,281.0,348.1,258.3,207.9,198.2,434.3,467.9,550.4,490.9,430.2,430.2,751.2,651.1,538.1,303.6,753.5,774.1,825.3,720.4,911.1,654.7,798.2,769.1,1128.6,1867.7,1201.8,1362.7,296.5,715.1,471.1,0.0},
				{269.8,379.5,314.2,303.2,0.0,264.5,492.9,494.4,457.8,591.4,520.0,717.6,269.8,379.5,314.2,303.2,0.0,264.5,492.9,494.4,457.8,591.4,520.0,717.6,492.8,720.7,931.6,780.4,777.3,607.0,819.3,847.2,661.5,795.1,650.2,632.6,877.3,917.3,378.0,139.9,238.6,297.1,316.1,591.4,698.6,550.0,675.9,342.1,424.7,410.0,169.0,305.6,272.9,282.9,285.8,281.7,447.2,441.1,523.6,284.9,224.2,224.2,549.1,445.1,332.1,328.2,547.5,598.7,879.8,774.9,965.6,760.6,904.1,847.0,1021.4,1806.5,1307.7,1468.6,382.3,513.0,556.9,0.0},
				{226.7,312.8,455.0,561.6,269.2,0.0,426.2,427.7,391.1,524.7,760.2,957.8,226.7,312.8,455.0,561.6,269.2,0.0,426.2,427.7,391.1,524.7,760.2,957.8,486.9,651.8,864.9,713.7,710.6,540.3,923.8,960.1,862.2,995.8,850.9,833.3,1117.5,1157.5,636.4,398.3,497.0,555.5,298.2,524.7,631.9,657.3,810.9,330.8,388.3,343.3,422.6,446.4,262.3,423.7,489.8,521.9,380.5,374.4,456.9,149.1,215.5,215.5,480.2,324.1,211.1,427.9,541.6,592.8,932.5,964.5,1155.2,1000.8,1144.3,1047.7,954.7,1739.8,1547.9,1708.8,640.7,444.1,815.3,0.0},
				{319.0,135.5,363.7,591.6,489.1,456.7,0.0,238.7,393.7,354.5,616.4,788.7,319.0,135.5,363.7,591.6,489.1,456.7,0.0,238.7,393.7,354.5,616.4,788.7,773.4,580.7,719.8,431.8,528.8,232.5,616.0,652.3,643.5,777.1,632.2,614.6,964.7,988.4,856.3,618.2,647.2,575.1,525.9,354.5,324.1,349.5,503.1,272.1,216.6,258.4,478.5,419.3,412.7,379.2,452.6,495.4,155.0,250.0,230.8,521.8,504.8,504.8,434.2,563.0,583.8,369.1,817.4,868.6,1208.3,1185.2,1285.1,831.7,975.2,829.0,772.9,1530.0,1378.8,1539.7,761.3,456.3,754.9,0.0},
				{340.8,259.6,401.0,620.8,508.6,474.5,267.2,0.0,214.0,191.6,614.4,786.7,340.8,259.6,401.0,620.8,508.6,474.5,267.2,0.0,214.0,191.6,614.4,786.7,680.1,417.8,548.0,315.2,383.9,252.1,635.6,671.9,641.5,775.1,630.2,612.6,962.7,986.4,821.5,637.7,676.4,604.3,537.8,191.6,343.7,347.5,501.1,301.3,323.4,174.4,507.7,456.6,441.9,408.4,489.9,493.4,279.1,92.6,49.8,539.6,524.3,524.3,271.3,400.1,544.2,398.3,654.5,705.7,1045.4,1077.4,1268.1,829.7,973.2,827.0,628.0,1367.1,1376.8,1537.7,790.5,293.4,752.9,0.0},
				{310.2,351.3,534.5,681.7,480.3,447.9,436.3,203.7,0.0,192.1,797.5,969.8,310.2,351.3,534.5,681.7,480.3,447.9,436.3,203.7,0.0,192.1,797.5,969.8,668.9,408.4,532.3,381.1,378.0,435.2,818.7,855.0,824.6,958.2,813.3,795.7,1145.8,1169.5,810.3,609.4,708.1,665.2,513.1,192.1,526.8,530.6,684.2,362.1,419.6,236.3,568.6,525.9,419.3,469.3,567.1,620.5,419.0,193.2,232.9,513.0,496.0,496.0,260.4,340.3,484.4,459.2,643.3,694.5,1034.2,1066.2,1256.9,1012.8,1156.3,1010.1,622.1,1407.2,1559.9,1720.8,851.4,281.0,936.0,0.0},
				{418.7,386.2,527.6,764.8,588.3,554.2,393.8,207.1,246.3,0.0,741.0,913.3,418.7,386.2,527.6,764.8,588.3,554.2,393.8,207.1,246.3,0.0,741.0,913.3,628.5,288.1,405.3,409.4,406.3,378.7,762.2,798.5,768.1,901.7,756.8,739.2,1089.3,1113.0,769.9,717.4,816.1,752.4,617.5,0.0,470.3,474.1,627.7,449.4,467.1,322.5,655.8,583.2,527.8,556.5,616.5,620.0,405.7,240.7,181.3,619.3,604.0,604.0,219.7,367.1,503.9,546.4,602.9,654.1,993.8,1025.8,1216.5,956.3,1099.8,953.6,650.4,1294.1,1503.4,1664.3,938.6,241.8,879.5,0.0},
				{658.2,554.9,451.7,337.9,477.9,724.2,562.5,598.0,753.0,713.8,0.0,329.1,658.2,554.9,451.7,337.9,477.9,724.2,562.5,598.0,753.0,713.8,0.0,329.1,952.5,940.0,1079.1,815.6,903.2,616.3,650.3,678.2,476.8,578.2,491.7,292.7,582.3,575.5,658.3,464.3,420.2,325.3,746.5,713.8,667.2,501.8,506.9,568.9,551.6,713.4,395.8,526.9,599.5,509.7,356.2,251.3,574.4,631.6,590.1,744.6,683.9,683.9,793.5,904.8,791.8,555.0,999.3,1011.9,1063.1,958.2,872.2,439.9,583.4,664.7,1038.8,1889.3,996.4,1157.3,534.3,815.6,372.5,0.0},
				{889.4,759.9,682.8,586.2,726.2,972.5,767.5,803.0,958.0,918.8,329.7,0.0,889.4,759.9,682.8,586.2,726.2,972.5,767.5,803.0,958.0,918.8,329.7,0.0,1200.8,1145.0,1284.1,1020.6,1108.2,821.3,855.3,883.2,558.9,660.3,582.4,381.2,596.2,508.3,766.0,712.6,668.5,573.6,977.7,918.8,872.2,706.8,711.9,800.1,756.6,918.4,644.1,743.7,830.7,740.9,587.3,499.6,779.4,836.6,795.1,992.9,932.2,932.2,998.5,1127.3,1040.1,786.2,1107.0,1119.6,1170.8,944.5,805.0,372.7,516.2,694.5,1243.8,2094.3,1119.2,1280.1,620.3,1020.6,386.4,0.0},
				{549.6,660.9,745.4,798.5,506.1,440.8,774.3,751.2,730.8,657.8,1015.3,1212.9,549.6,660.9,745.4,798.5,506.1,440.8,774.3,751.2,730.8,657.8,1015.3,1212.9,0.0,661.1,1063.1,958.6,955.5,888.4,1271.9,1308.2,1152.6,1286.2,1141.3,1123.7,1270.7,1399.0,524.2,635.2,733.9,792.4,595.9,657.8,980.0,981.2,1134.8,678.9,736.4,691.4,664.3,736.8,552.7,714.1,780.2,777.0,728.6,722.5,725.4,461.2,359.0,359.0,567.0,437.9,349.6,762.9,345.6,408.4,748.1,780.1,970.8,1255.9,1399.4,1338.1,1199.6,1779.8,1414.3,1595.8,758.0,536.5,891.4,0.0},
				{545.3,596.0,737.4,946.6,681.6,634.6,603.6,416.9,440.3,323.5,950.8,1123.1,545.3,596.0,737.4,946.6,681.6,634.6,603.6,416.9,440.3,323.5,950.8,1123.1,605.0,0.0,728.8,622.6,619.5,588.5,972.0,1008.3,977.9,1111.5,966.6,949.0,1299.1,1322.8,746.4,810.7,909.4,930.1,710.8,323.5,680.1,683.9,837.5,659.2,676.9,532.3,786.1,793.0,625.8,766.3,826.3,829.8,615.5,450.5,391.1,655.0,676.0,676.0,314.0,379.0,525.2,756.2,579.4,630.6,970.3,1002.3,1193.0,1166.1,1309.6,1163.4,863.6,1212.9,1636.5,1818.0,980.2,299.8,1089.3,0.0},
				{790.6,743.6,885.0,1122.2,960.7,928.3,751.2,564.5,647.1,433.6,1098.4,1270.7,790.6,743.6,885.0,1122.2,960.7,928.3,751.2,564.5,647.1,433.6,1098.4,1270.7,1062.1,721.7,0.0,578.8,575.7,725.6,1119.6,1155.9,1125.5,1259.1,1114.2,1096.6,1446.7,1470.4,1203.5,1089.8,1181.9,1109.8,993.5,433.6,827.7,831.5,985.1,806.8,824.5,679.9,1013.2,940.6,899.7,913.9,973.9,977.4,763.1,598.1,556.0,993.4,976.4,976.4,653.3,800.7,937.5,903.8,1036.5,1087.7,1427.4,1459.4,1650.1,1313.7,1457.2,1311.0,819.8,1727.7,1860.8,2021.7,1296.0,675.4,1236.9,0.0},
				{608.1,492.0,655.1,892.3,778.2,745.8,499.6,337.9,464.6,409.0,868.5,1040.8,608.1,492.0,655.1,892.3,778.2,745.8,499.6,337.9,464.6,409.0,868.5,1040.8,922.5,660.3,567.0,0.0,249.7,398.7,811.6,847.9,895.6,1029.2,884.3,866.7,1216.8,1240.5,1063.9,907.3,955.3,882.8,811.0,409.0,519.7,601.6,736.6,580.2,572.9,453.3,786.6,710.7,717.2,687.3,744.0,747.5,511.5,371.5,327.8,810.9,793.9,793.9,513.7,632.0,776.1,677.2,896.9,948.1,1287.8,1319.8,1510.5,1083.8,1227.3,1057.1,493.8,1609.6,1630.9,1791.8,1069.4,535.8,1007.0,0.0},
				{590.7,543.7,685.1,922.3,760.8,728.4,551.3,364.6,447.2,391.6,898.5,1070.8,590.7,543.7,685.1,922.3,760.8,728.4,551.3,364.6,447.2,391.6,898.5,1070.8,905.1,642.9,549.6,237.1,0.0,464.5,774.8,868.0,925.6,1059.2,914.3,896.7,1246.8,1270.5,1046.5,889.9,982.0,909.9,793.6,391.6,585.5,631.6,758.8,606.9,624.6,480.0,813.3,740.7,699.8,714.0,774.0,777.5,563.2,398.2,356.1,793.5,776.5,776.5,496.3,614.6,758.7,703.9,879.5,930.7,1270.4,1302.4,1493.1,1113.8,1257.3,1079.3,439.0,1592.2,1660.9,1821.8,1096.1,518.4,1037.0,0.0},
				{449.6,266.1,429.2,666.4,619.7,587.3,273.7,332.8,487.8,448.6,642.6,814.9,449.6,266.1,429.2,666.4,619.7,587.3,273.7,332.8,487.8,448.6,642.6,814.9,904.0,674.8,718.4,406.9,503.9,0.0,513.3,549.6,643.7,803.3,632.4,640.8,990.9,1014.6,986.9,748.8,749.1,656.9,656.5,448.6,203.9,375.7,438.3,403.0,347.0,438.2,609.4,484.8,543.6,509.3,518.1,521.6,285.6,366.4,324.9,652.4,635.4,635.4,528.3,657.1,714.4,500.0,911.5,962.7,1302.4,1287.1,1311.3,857.9,1001.4,758.8,718.6,1624.1,1405.0,1565.9,863.2,550.4,781.1,0.0},
				{759.9,576.4,634.8,690.3,744.5,897.6,584.0,643.1,798.1,758.9,582.1,754.4,759.9,576.4,634.8,690.3,744.5,897.6,584.0,643.1,798.1,758.9,582.1,754.4,1214.3,985.1,1065.4,753.9,668.7,509.9,0.0,167.4,424.7,660.9,413.4,591.9,930.4,954.1,1010.7,816.7,772.6,677.7,947.7,758.9,495.7,449.0,323.6,713.3,657.3,748.5,662.4,690.4,800.7,710.9,557.3,559.4,595.9,676.7,635.2,962.7,945.7,945.7,838.6,967.4,1024.7,756.2,1221.8,1273.0,1415.5,1310.6,1250.8,797.4,940.9,671.3,804.3,1934.4,1344.5,1505.4,886.7,860.7,720.6,0.0},
				{830.9,647.4,705.8,761.3,815.5,968.6,655.0,714.1,869.1,829.9,653.1,825.4,830.9,647.4,705.8,761.3,815.5,968.6,655.0,714.1,869.1,829.9,653.1,825.4,1285.3,1056.1,1136.4,824.9,801.8,580.9,217.4,0.0,470.9,707.1,459.6,643.9,1001.4,1025.1,1081.7,887.7,843.6,748.7,1018.7,829.9,566.7,520.0,394.6,784.3,728.3,819.5,733.4,761.4,871.7,781.9,628.3,630.4,666.9,747.7,706.2,1033.7,1016.7,1016.7,909.6,1038.4,1095.7,827.2,1292.8,1344.0,1486.5,1381.6,1321.8,868.4,1011.9,742.3,937.4,2005.4,1415.5,1576.4,957.7,931.7,791.6,0.0},
				{767.4,637.9,560.8,591.3,652.5,898.8,645.5,681.0,836.0,796.8,469.1,549.5,767.4,637.9,560.8,591.3,652.5,898.8,645.5,681.0,836.0,796.8,469.1,549.5,1127.1,1023.0,1162.1,898.6,905.6,683.8,497.1,498.1,0.0,385.0,123.1,228.5,831.4,795.9,911.7,717.7,673.6,578.7,855.7,796.8,669.6,584.8,501.0,678.1,634.6,796.4,570.4,621.7,708.7,618.9,465.3,467.4,657.4,714.6,673.1,919.2,858.5,858.5,876.5,1005.3,966.4,664.2,1181.8,1233.0,1316.5,1211.6,1092.6,660.3,803.8,638.2,1041.2,1972.3,1245.5,1406.4,787.7,898.6,621.6,0.0},
				{881.2,751.7,674.6,705.1,766.3,1012.6,759.3,794.8,949.8,910.6,572.9,653.3,881.2,751.7,674.6,705.1,766.3,1012.6,759.3,794.8,949.8,910.6,572.9,653.3,1240.9,1136.8,1275.9,1012.4,1106.9,813.1,731.9,732.9,383.7,0.0,410.2,332.3,945.2,899.7,1025.5,831.5,787.4,692.5,969.5,910.6,870.9,698.6,710.6,791.9,748.4,910.2,684.2,735.5,822.5,732.7,579.1,581.2,771.2,828.4,786.9,1033.0,972.3,972.3,990.3,1119.1,1080.2,778.0,1295.6,1346.8,1430.3,1325.4,1196.4,764.1,907.6,660.5,1242.5,2086.1,1359.3,1520.2,901.5,1012.4,735.4,0.0},
				{752.9,623.4,546.3,576.8,638.0,884.3,631.0,666.5,821.5,782.3,468.6,574.8,752.9,623.4,546.3,576.8,638.0,884.3,631.0,666.5,821.5,782.3,468.6,574.8,1112.6,1008.5,1147.6,884.1,891.1,669.3,482.6,483.6,124.1,409.2,0.0,253.8,816.9,821.2,897.2,703.2,659.1,564.2,841.2,782.3,655.1,570.3,486.5,663.6,620.1,781.9,555.9,607.2,694.2,604.4,450.8,452.9,642.9,700.1,658.6,904.7,844.0,844.0,862.0,990.8,951.9,649.7,1167.3,1218.5,1302.0,1197.1,1117.9,683.9,827.4,662.4,1026.7,1957.8,1231.0,1391.9,773.2,884.1,607.1,0.0},
				{707.2,577.7,500.6,531.1,592.3,838.6,585.3,620.8,775.8,736.6,289.2,381.8,707.2,577.7,500.6,531.1,592.3,838.6,585.3,620.8,775.8,736.6,289.2,381.8,1066.9,962.8,1101.9,838.4,932.9,639.1,670.9,671.9,232.5,333.9,256.0,0.0,716.1,628.2,851.5,657.5,613.4,518.5,795.5,736.6,696.9,524.6,536.6,617.9,574.4,736.2,510.2,561.5,648.5,558.7,405.1,407.2,597.2,654.4,612.9,859.0,798.3,798.3,816.3,945.1,906.2,604.0,1121.6,1172.8,1256.3,1064.4,924.9,492.6,636.1,666.9,1068.5,1912.1,1185.3,1346.2,727.5,838.4,506.3,0.0},
				{1006.2,876.7,799.6,703.0,843.0,1089.3,884.3,919.8,1074.8,1035.6,637.2,590.8,1006.2,876.7,799.6,703.0,843.0,1089.3,884.3,919.8,1074.8,1035.6,637.2,590.8,1296.8,1261.8,1400.9,1137.4,1225.0,938.1,972.1,1000.0,835.0,968.6,823.7,703.2,0.0,778.0,790.3,816.1,772.0,690.4,1094.5,1035.6,989.0,823.6,828.7,916.9,873.4,1035.2,760.9,860.5,947.5,857.7,704.1,616.4,896.2,953.4,911.9,1109.7,1049.0,1049.0,1115.3,1244.1,1156.9,903.0,1131.3,1143.9,1195.1,1090.2,1074.7,633.8,777.3,999.8,1360.6,2211.1,1236.0,1396.9,694.7,1137.4,402.9,0.0},
				{1040.1,910.6,833.5,736.9,876.9,1123.2,918.2,953.7,1108.7,1069.5,575.7,514.8,1040.1,910.6,833.5,736.9,876.9,1123.2,918.2,953.7,1108.7,1069.5,575.7,514.8,1351.5,1295.7,1434.8,1171.3,1258.9,972.0,1006.0,1033.9,804.9,906.3,828.4,627.2,746.9,0.0,906.0,863.3,819.2,724.3,1128.4,1069.5,1022.9,857.5,862.6,950.8,907.3,1069.1,794.8,894.4,981.4,891.6,738.0,650.3,930.1,987.3,945.8,1143.6,1082.9,1082.9,1149.2,1278.0,1190.8,936.9,1247.0,1016.4,1080.8,767.5,628.0,579.9,723.4,943.7,1394.5,2245.0,1237.9,1430.8,771.0,1171.3,518.6,0.0},
				{620.5,730.2,645.4,370.2,368.9,615.2,843.6,845.1,808.5,798.7,678.1,737.3,620.5,730.2,645.4,370.2,368.9,615.2,843.6,845.1,808.5,798.7,678.1,737.3,547.6,802.0,1204.0,1099.5,1096.4,957.7,1023.3,1051.2,886.2,1019.8,874.9,849.7,794.1,928.8,0.0,343.6,320.6,425.3,666.8,798.7,1040.2,868.3,879.9,673.3,755.9,760.7,500.2,636.8,623.6,614.1,578.1,513.2,790.1,791.8,866.3,635.6,574.9,574.9,707.9,578.8,625.0,659.4,382.1,445.6,549.4,444.5,635.2,780.3,923.8,1051.0,1340.5,1920.7,1126.6,1393.6,281.4,677.4,414.8,0.0},
				{395.8,505.5,420.7,163.3,144.2,390.5,618.9,620.4,583.8,717.4,471.2,668.8,395.8,505.5,420.7,163.3,144.2,390.5,618.9,620.4,583.8,717.4,471.2,668.8,618.8,846.7,1057.6,906.4,903.3,733.0,816.4,844.3,679.3,812.9,668.0,650.4,796.3,868.5,338.1,0.0,98.7,218.4,442.1,717.4,824.6,656.5,673.0,448.6,531.2,536.0,275.5,412.1,398.9,389.4,371.2,306.3,565.4,567.1,649.6,410.9,350.2,350.2,675.1,571.1,458.1,434.7,597.9,661.4,771.2,666.3,857.0,711.8,855.3,844.1,1147.4,1932.5,1258.9,1419.8,242.4,639.0,417.0,0.0},
				{491.3,530.9,412.1,122.5,239.7,486.0,642.2,643.7,679.3,812.9,430.4,628.0,491.3,530.9,412.1,122.5,239.7,486.0,642.2,643.7,679.3,812.9,430.4,628.0,714.3,942.2,1153.1,934.4,998.8,735.1,775.6,803.5,638.5,772.1,627.2,609.6,755.5,827.7,325.6,95.5,0.0,177.6,537.6,812.9,792.5,620.6,632.2,440.0,522.6,594.5,266.9,403.5,470.6,380.8,330.4,265.5,556.8,590.4,672.9,506.4,445.7,445.7,770.6,666.6,553.6,426.1,666.6,679.2,730.4,625.5,816.2,671.0,814.5,803.3,1164.1,1990.2,1218.1,1379.0,201.6,734.5,376.2,0.0},
				{526.2,527.8,367.1,119.4,343.6,589.9,575.4,610.9,719.9,726.7,324.5,522.1,526.2,527.8,367.1,119.4,343.6,589.9,575.4,610.9,719.9,726.7,324.5,522.1,818.2,952.9,1092.0,828.5,922.6,629.2,669.7,697.6,532.6,666.2,521.3,503.7,681.8,721.8,404.5,210.5,166.4,0.0,614.5,726.7,686.6,514.7,526.3,436.9,519.5,591.4,263.8,400.4,467.5,377.7,271.6,166.7,553.7,587.3,603.0,610.3,549.6,549.6,806.4,770.5,657.5,423.0,745.5,758.1,809.3,704.4,895.1,565.1,708.6,697.4,1058.2,1902.2,1112.2,1273.1,280.5,828.5,438.0,0.0},
				{238.1,413.9,433.9,562.0,306.0,326.5,527.3,528.8,492.2,625.8,739.1,936.7,238.1,413.9,433.9,562.0,306.0,326.5,527.3,528.8,492.2,625.8,739.1,936.7,588.8,747.5,966.0,814.8,811.7,641.4,998.9,1026.8,841.1,974.7,829.8,812.2,1096.4,1136.4,673.2,435.1,533.8,545.5,0.0,625.8,733.0,669.7,823.3,431.9,489.4,444.4,401.5,425.3,241.2,402.6,468.7,500.8,481.6,475.5,558.0,380.9,320.2,320.2,575.9,541.1,428.1,451.4,643.5,694.7,1034.4,1066.4,1257.1,979.7,1123.2,1026.6,1055.8,1840.9,1526.8,1687.7,677.5,539.8,852.1,0.0},
				{418.7,386.2,527.6,764.8,588.3,554.2,393.8,207.1,246.3,0.0,741.0,913.3,418.7,386.2,527.6,764.8,588.3,554.2,393.8,207.1,246.3,0.0,741.0,913.3,628.5,288.1,405.3,409.4,406.3,378.7,762.2,798.5,768.1,901.7,756.8,739.2,1089.3,1113.0,769.9,717.4,816.1,752.4,617.5,0.0,470.3,474.1,627.7,449.4,467.1,322.5,655.8,583.2,527.8,556.5,616.5,620.0,405.7,240.7,181.3,619.3,604.0,604.0,219.7,367.1,503.9,546.4,602.9,654.1,993.8,1025.8,1216.5,956.3,1099.8,953.6,650.4,1294.1,1503.4,1664.3,938.6,241.8,879.5,0.0},
				{517.7,334.2,497.3,734.5,687.8,655.4,341.8,400.9,555.9,516.7,710.7,883.0,517.7,334.2,497.3,734.5,687.8,655.4,341.8,400.9,555.9,516.7,710.7,883.0,972.1,742.9,823.2,511.7,608.7,200.8,602.2,638.5,732.6,871.4,721.3,708.9,1059.0,1082.7,1055.0,816.9,817.2,725.0,724.6,516.7,0.0,443.8,516.0,471.1,415.1,506.3,677.5,552.9,611.7,577.4,586.2,589.7,353.7,434.5,393.0,720.5,703.5,703.5,596.4,725.2,782.5,568.1,979.6,1030.8,1370.5,1355.2,1379.4,926.0,1069.5,847.7,807.5,1692.2,1473.1,1634.0,931.3,618.5,849.2,0.0},
				{506.4,373.5,273.0,544.2,560.4,694.7,381.1,416.6,571.6,532.4,520.4,692.7,506.4,373.5,273.0,544.2,560.4,694.7,381.1,416.6,571.6,532.4,520.4,692.7,977.4,758.6,897.7,634.2,731.2,434.9,484.2,512.1,547.5,681.1,536.2,518.6,868.7,892.4,865.0,643.5,626.9,534.7,666.5,532.4,480.0,0.0,219.0,417.1,341.5,532.0,478.3,328.6,519.5,353.1,361.9,399.4,375.2,450.2,408.7,759.8,708.8,708.8,612.1,740.9,816.7,403.2,995.3,1046.5,1269.8,1164.9,1189.1,735.7,879.2,729.6,901.7,1707.9,1282.8,1443.7,741.0,634.2,658.9,0.0},
				{651.2,500.0,417.8,637.8,692.0,821.2,507.6,561.4,716.4,677.2,529.6,701.9,651.2,500.0,417.8,637.8,692.0,821.2,507.6,561.4,716.4,677.2,529.6,701.9,1122.2,903.4,989.0,677.5,655.3,433.5,373.4,401.3,502.5,701.9,491.2,539.4,877.9,901.6,958.2,764.2,720.1,625.2,811.3,677.2,419.3,220.3,0.0,561.9,486.3,672.1,609.9,473.4,664.3,497.9,504.8,506.9,519.5,595.0,553.5,886.3,853.6,853.6,756.9,885.7,948.3,548.0,1140.1,1191.3,1363.0,1258.1,1198.3,744.9,888.4,618.8,790.9,1852.7,1292.0,1452.9,834.2,779.0,668.1,0.0},
				{125.6,195.9,286.7,433.9,327.9,329.3,307.2,308.7,320.6,454.2,611.0,808.6,125.6,195.9,286.7,433.9,327.9,329.3,307.2,308.7,320.6,454.2,611.0,808.6,610.7,670.5,794.4,603.3,640.1,423.4,806.9,843.2,691.7,825.3,680.4,662.8,968.3,1008.3,695.1,457.0,489.5,417.4,299.8,454.2,515.0,445.4,599.0,0.0,171.8,259.5,320.8,278.1,176.9,221.5,319.3,372.7,206.0,255.4,337.9,394.4,342.1,342.1,501.2,528.4,450.0,146.8,665.4,716.6,1056.3,1027.5,1218.2,851.6,995.1,877.2,884.2,1655.2,1398.7,1559.6,603.6,465.1,753.8,0.0},
				{173.1,162.6,263.0,410.2,375.4,381.8,261.0,300.9,380.2,471.9,587.3,784.9,173.1,162.6,263.0,410.2,375.4,381.8,261.0,300.9,380.2,471.9,587.3,784.9,658.2,698.1,828.3,574.3,664.2,375.0,758.5,794.5,662.8,796.4,651.5,633.9,944.6,984.6,700.4,462.3,465.8,393.7,347.3,471.9,466.6,355.5,509.1,83.8,0.0,251.7,297.1,254.4,224.4,173.9,295.6,349.0,135.7,247.6,330.1,446.9,389.6,389.6,551.6,580.9,497.5,187.7,712.9,764.1,1103.8,1003.8,1194.5,827.9,971.4,848.3,908.3,1647.4,1375.0,1535.9,579.9,517.6,730.1,0.0},
				{210.3,192.4,393.9,541.1,380.4,348.0,245.8,197.9,254.7,368.9,718.2,915.8,210.3,192.4,393.9,541.1,380.4,348.0,245.8,197.9,254.7,368.9,718.2,915.8,664.7,595.1,725.3,492.5,561.2,392.2,775.7,812.0,798.9,932.5,787.6,770.0,1075.5,1115.5,747.6,509.5,596.7,524.6,417.2,368.9,483.8,509.2,662.8,221.6,262.4,0.0,428.0,385.3,325.4,328.7,426.5,479.9,260.1,127.0,227.1,413.1,396.1,396.1,435.0,462.2,475.1,318.6,719.4,770.6,1110.3,1134.7,1325.4,958.8,1102.3,984.4,805.3,1544.4,1505.9,1666.8,710.8,398.9,861.0,0.0},
				{262.4,264.0,145.2,240.1,209.1,406.6,375.3,376.8,456.1,547.8,417.2,614.8,262.4,264.0,145.2,240.1,209.1,406.6,375.3,376.8,456.1,547.8,417.2,614.8,661.6,774.0,904.2,671.4,740.1,491.5,677.0,704.9,519.2,652.8,507.9,490.3,774.5,814.5,530.3,292.2,295.7,223.6,350.7,547.8,583.1,381.0,533.6,173.1,255.7,327.6,0.0,136.6,203.7,113.9,146.8,178.9,289.9,323.5,406.0,453.7,393.0,393.0,606.8,613.9,500.9,159.2,716.3,767.5,938.6,833.7,1024.4,657.8,801.3,704.7,984.2,1723.3,1204.9,1365.8,409.8,570.7,560.0,0.0},
				{291.9,293.5,153.9,337.7,306.7,468.7,404.8,406.3,485.6,577.3,514.8,712.4,291.9,293.5,153.9,337.7,306.7,468.7,404.8,406.3,485.6,577.3,514.8,712.4,723.7,803.5,933.7,700.9,769.6,521.0,753.3,781.2,595.5,729.1,584.2,566.6,872.1,912.1,627.9,389.8,393.3,321.2,412.8,577.3,612.6,376.2,529.8,202.6,238.3,357.1,224.6,0.0,265.8,90.7,223.1,276.5,306.4,353.0,435.5,515.8,455.1,455.1,657.0,676.0,563.0,188.7,778.4,829.6,1036.2,931.3,1122.0,755.4,898.9,781.0,1013.7,1752.8,1302.5,1463.4,507.4,623.0,657.6,0.0},
				{156.5,322.6,223.5,351.6,265.4,293.2,436.0,437.5,397.1,530.7,528.7,726.3,156.5,322.6,223.5,351.6,265.4,293.2,436.0,437.5,397.1,530.7,528.7,726.3,548.2,665.0,870.9,719.7,716.6,550.1,788.5,816.4,630.7,764.3,619.4,601.8,886.0,926.0,632.6,394.5,407.2,335.1,237.3,530.7,641.7,459.3,612.9,254.9,337.5,353.1,191.1,214.9,0.0,192.2,258.3,290.4,371.7,384.2,466.7,340.3,279.6,279.6,493.4,500.5,387.5,241.0,602.9,654.1,993.8,945.2,1135.9,769.3,912.8,816.2,960.7,1745.8,1316.4,1477.3,521.3,457.3,671.5,0.0},
				{216.5,218.1,153.9,327.6,296.6,411.8,329.4,330.9,410.2,501.9,504.7,702.3,216.5,218.1,153.9,327.6,296.6,411.8,329.4,330.9,410.2,501.9,504.7,702.3,701.6,728.1,858.3,625.5,694.2,445.6,736.0,763.9,585.4,719.0,574.1,556.5,862.0,902.0,617.8,379.7,383.2,311.1,390.7,501.9,537.2,324.9,478.5,127.2,187.0,281.7,214.5,145.3,263.6,0.0,213.0,266.4,244.0,277.6,360.1,476.9,433.0,433.0,581.6,610.9,538.9,113.3,756.3,807.5,1026.1,921.2,1111.9,745.3,888.8,770.9,938.3,1677.4,1292.4,1453.3,497.3,547.6,647.5,0.0},
				{387.3,388.9,128.1,232.1,272.4,518.7,437.6,473.1,581.0,588.9,362.0,559.6,387.3,388.9,128.1,232.1,272.4,518.7,437.6,473.1,581.0,588.9,362.0,559.6,747.0,815.1,954.2,690.7,787.7,491.4,592.5,620.4,434.7,568.3,423.4,405.8,719.3,759.3,571.1,355.5,333.0,222.6,475.6,588.9,583.0,356.3,449.1,298.0,380.6,452.5,190.3,203.3,328.6,238.8,0.0,145.3,414.8,448.4,465.2,539.1,478.4,478.4,668.6,699.3,586.3,284.1,801.7,852.9,975.9,871.0,1056.0,602.6,746.1,620.2,981.0,1764.4,1149.7,1310.6,447.1,690.7,503.6,0.0},
				{453.1,447.2,246.5,146.9,295.1,541.4,454.8,490.3,645.3,606.1,270.7,468.3,453.1,447.2,246.5,146.9,295.1,541.4,454.8,490.3,645.3,606.1,270.7,468.3,769.7,832.3,971.4,707.9,804.9,508.6,609.7,637.6,451.9,585.5,440.6,423.0,628.0,668.0,511.5,317.5,273.4,137.4,541.4,606.1,600.2,394.1,466.3,363.8,443.9,518.3,213.0,321.7,394.4,304.6,151.0,0.0,466.7,514.2,482.4,561.8,501.1,501.1,685.8,722.0,609.0,349.9,824.4,865.1,916.3,811.4,964.7,511.3,654.8,637.4,998.2,1781.6,1058.4,1219.3,387.5,707.9,412.3,0.0},
				{247.0,63.5,371.9,519.9,417.1,384.7,141.7,261.3,383.1,377.1,639.0,811.3,247.0,63.5,371.9,519.9,417.1,384.7,141.7,261.3,383.1,377.1,639.0,811.3,701.4,603.3,742.4,454.4,551.4,255.1,638.6,674.9,666.1,799.7,654.8,637.2,987.3,1011.0,784.3,546.2,575.5,503.4,453.9,377.1,346.7,372.1,525.7,200.4,142.1,252.0,406.8,364.1,341.0,307.5,405.3,458.7,0.0,243.6,253.4,449.8,432.8,432.8,456.8,583.8,511.8,297.4,756.1,807.3,1147.0,1113.5,1304.2,854.3,997.8,851.6,795.5,1552.6,1401.4,1562.3,689.6,478.9,777.5,0.0},
				{261.2,207.0,408.6,555.8,429.0,394.9,243.1,92.4,188.2,263.4,686.2,858.5,261.2,207.0,408.6,555.8,429.0,394.9,243.1,92.4,188.2,263.4,686.2,858.5,713.3,489.6,619.8,387.0,455.7,323.9,707.4,743.7,713.3,846.9,702.0,684.4,1034.5,1058.2,796.2,558.1,611.4,539.3,458.2,263.4,415.5,419.3,572.9,236.3,258.4,94.8,442.7,400.0,370.3,343.4,441.2,494.6,256.3,0.0,121.6,460.0,444.7,444.7,343.1,410.6,488.8,333.3,709.6,760.8,1100.5,1132.5,1323.2,901.5,1045.0,898.8,699.8,1438.9,1448.6,1609.5,725.5,347.3,824.7,0.0},
				{354.4,263.6,405.0,634.4,522.2,488.1,271.2,72.6,227.6,195.5,618.4,790.7,354.4,263.6,405.0,634.4,522.2,488.1,271.2,72.6,227.6,195.5,618.4,790.7,684.0,421.7,551.7,318.9,387.6,256.1,639.6,675.9,645.5,779.1,634.2,616.6,966.7,990.4,825.4,651.3,690.0,617.9,551.4,195.5,347.7,351.5,505.1,314.9,337.0,188.0,521.3,460.6,455.5,422.0,493.9,497.4,283.1,106.2,0.0,553.2,537.9,537.9,275.2,404.0,548.1,411.9,658.4,709.6,1049.3,1081.3,1272.0,833.7,977.2,831.0,631.7,1371.0,1380.8,1541.7,804.1,297.3,756.9,0.0},
				{285.1,371.2,513.4,614.1,321.7,58.4,484.6,486.1,449.5,583.1,818.6,1016.2,285.1,371.2,513.4,614.1,321.7,58.4,484.6,486.1,449.5,583.1,818.6,1016.2,491.2,710.2,923.3,772.1,769.0,598.7,982.2,1018.5,920.6,1054.2,909.3,891.7,1175.9,1215.9,688.9,450.8,549.5,608.0,356.6,583.1,690.3,715.7,869.3,389.2,446.7,401.7,479.9,504.8,320.7,482.1,548.2,580.3,438.9,432.8,515.3,0.0,219.8,219.8,538.6,328.4,215.4,486.3,545.9,597.1,936.8,968.8,1159.5,1059.2,1202.7,1106.1,1013.1,1798.2,1603.0,1767.2,693.2,502.5,867.8,0.0},
				{283.7,395.0,479.5,532.6,240.2,170.9,508.4,509.9,473.3,606.9,749.4,947.0,283.7,395.0,479.5,532.6,240.2,170.9,508.4,509.9,473.3,606.9,749.4,947.0,355.1,704.7,947.1,795.9,792.8,622.5,1006.0,1042.3,886.7,1020.3,875.4,857.8,1106.7,1146.7,576.8,369.3,468.0,526.5,330.0,606.9,714.1,715.3,868.9,413.0,470.5,425.5,398.4,470.9,286.8,448.2,514.3,511.1,462.7,456.6,539.1,191.3,0.0,0.0,562.2,299.9,186.9,497.0,409.8,461.0,800.7,832.7,1023.4,990.0,1133.5,1072.2,1036.9,1822.0,1466.9,1648.4,611.7,528.5,786.3,0.0},
				{283.7,395.0,479.5,532.6,240.2,170.9,508.4,509.9,473.3,606.9,749.4,947.0,283.7,395.0,479.5,532.6,240.2,170.9,508.4,509.9,473.3,606.9,749.4,947.0,355.1,704.7,947.1,795.9,792.8,622.5,1006.0,1042.3,886.7,1020.3,875.4,857.8,1106.7,1146.7,576.8,369.3,468.0,526.5,330.0,606.9,714.1,715.3,868.9,413.0,470.5,425.5,398.4,470.9,286.8,448.2,514.3,511.1,462.7,456.6,539.1,191.3,0.0,0.0,562.2,299.9,186.9,497.0,409.8,461.0,800.7,832.7,1023.4,990.0,1133.5,1072.2,1036.9,1822.0,1466.9,1648.4,611.7,528.5,786.3,0.0},
				{412.4,494.8,636.2,813.7,548.7,514.6,502.4,315.7,340.8,222.3,849.6,1021.9,412.4,494.8,636.2,813.7,548.7,514.6,502.4,315.7,340.8,222.3,849.6,1021.9,548.4,357.2,627.6,523.1,520.0,487.3,870.8,907.1,876.7,1010.3,865.4,847.8,1197.9,1221.6,689.8,677.8,776.5,797.2,577.9,222.3,578.9,582.7,736.3,530.0,575.7,410.6,653.2,677.0,492.9,637.2,720.4,728.6,514.3,349.3,289.9,553.6,564.4,564.4,0.0,287.0,423.8,627.1,522.8,574.0,913.7,945.7,1136.4,1064.9,1208.4,1062.2,764.1,1437.4,1579.9,1761.4,920.2,161.7,988.1,0.0},
				{438.5,538.1,690.9,744.0,451.6,255.6,643.9,452.2,369.2,363.8,960.8,1158.4,438.5,538.1,690.9,744.0,451.6,255.6,643.9,452.2,369.2,363.8,960.8,1158.4,392.7,404.8,769.1,632.5,629.4,628.8,1012.3,1048.6,1018.2,1151.8,1006.9,989.3,1280.6,1358.1,534.1,580.7,679.4,737.9,541.4,363.8,720.4,724.2,877.8,556.1,613.6,436.7,609.8,682.3,498.2,659.6,725.7,722.5,605.8,418.6,431.4,276.0,297.0,297.0,273.0,0.0,146.2,653.2,367.1,418.3,758.0,790.0,980.7,1201.4,1344.9,1203.7,873.5,1523.5,1424.2,1605.7,767.9,242.5,901.3,0.0},
				{374.9,461.0,583.5,636.6,344.2,148.2,574.4,560.1,511.1,498.9,853.4,1051.0,374.9,461.0,583.5,636.6,344.2,148.2,574.4,560.1,511.1,498.9,853.4,1051.0,339.6,550.6,904.2,774.4,771.3,688.5,1072.0,1108.3,990.7,1124.3,979.4,961.8,1210.7,1250.7,582.8,473.3,572.0,630.5,434.0,498.9,780.1,805.5,959.1,479.0,536.5,491.5,502.4,574.9,390.8,552.2,618.3,615.1,528.7,503.2,566.5,168.6,189.6,189.6,408.1,145.8,0.0,576.1,415.8,467.0,806.7,838.7,1029.4,1094.0,1237.5,1176.2,1015.4,1669.3,1472.9,1654.4,715.7,377.6,890.3,0.0},
				{248.4,250.0,293.4,442.8,411.8,443.7,361.3,362.8,442.1,533.8,619.9,817.5,248.4,250.0,293.4,442.8,411.8,443.7,361.3,362.8,442.1,533.8,619.9,817.5,733.5,760.0,890.2,657.4,726.1,477.5,858.4,886.3,700.6,834.2,689.3,671.7,977.2,1017.2,733.0,494.9,498.4,426.3,422.6,533.8,569.1,515.3,668.9,159.1,241.7,313.6,298.4,284.8,299.7,262.1,328.2,381.6,275.9,309.5,392.0,508.8,464.9,464.9,613.5,642.8,570.8,0.0,788.2,839.4,1141.3,1036.4,1227.1,860.5,1004.0,886.1,970.2,1709.3,1407.6,1568.5,612.5,579.5,762.7,0.0},
				{604.4,715.7,800.2,713.7,560.9,495.6,829.1,700.9,680.5,607.5,1021.6,1080.8,604.4,715.7,800.2,713.7,560.9,495.6,829.1,700.9,680.5,607.5,1021.6,1080.8,340.6,610.8,1012.8,908.3,905.2,872.5,1256.0,1292.3,1207.4,1341.0,1196.1,1178.5,1137.6,1272.3,391.1,606.2,664.1,768.8,650.7,607.5,964.1,967.9,1121.5,733.7,791.2,746.2,719.1,791.6,607.5,768.9,835.0,831.8,783.4,729.9,675.1,516.0,413.8,413.8,516.7,387.6,433.8,817.7,0.0,296.8,636.5,668.5,859.2,1123.8,1267.3,1392.9,1149.3,1729.5,1302.7,1484.2,624.9,486.2,758.3,0.0},
				{706.3,817.6,902.1,725.4,662.8,597.5,931.0,797.9,777.5,704.5,1033.3,1092.5,706.3,817.6,902.1,725.4,662.8,597.5,931.0,797.9,777.5,704.5,1033.3,1092.5,458.3,707.8,1109.8,1005.3,1002.2,969.5,1353.0,1389.3,1241.4,1375.0,1230.1,1204.9,1149.3,1023.1,485.8,718.9,675.8,780.5,752.6,704.5,1061.1,1064.9,1218.5,835.6,893.1,845.0,821.0,893.5,709.4,870.8,933.3,868.4,885.3,826.9,772.1,617.9,515.7,515.7,613.7,484.6,530.8,919.6,314.4,0.0,372.2,404.2,594.9,1135.5,1279.0,1406.2,1246.3,1826.5,1038.4,1305.4,636.6,583.2,770.0,0.0},
				{1054.0,1165.3,1068.7,779.1,867.3,945.2,1278.7,1145.6,1125.2,1052.2,1087.0,1146.2,1054.0,1165.3,1068.7,779.1,867.3,945.2,1278.7,1145.6,1125.2,1052.2,1087.0,1146.2,806.0,1055.5,1457.5,1353.0,1349.9,1317.2,1432.2,1460.1,1295.1,1428.7,1283.8,1258.6,1203.0,1117.7,539.5,773.6,729.5,834.2,1100.3,1052.2,1408.8,1277.2,1288.8,1096.6,1179.2,1192.7,923.5,1060.1,1057.1,1037.4,987.0,922.1,1213.4,1174.6,1119.8,965.6,863.4,863.4,961.4,832.3,878.5,1082.7,662.1,359.3,0.0,498.8,520.4,1189.2,1332.7,1459.9,1594.0,2174.2,848.8,1115.8,690.3,930.9,823.7,0.0},
				{1049.7,1118.3,999.5,709.9,798.1,996.4,1229.6,1196.8,1176.4,1103.4,1017.8,964.7,1049.7,1118.3,999.5,709.9,798.1,996.4,1229.6,1196.8,1176.4,1103.4,1017.8,964.7,857.2,1106.7,1508.7,1404.2,1401.1,1322.5,1363.0,1390.9,1225.9,1356.2,1214.6,1077.1,1133.8,774.9,470.3,704.4,660.3,765.0,1096.0,1103.4,1379.9,1208.0,1219.6,1027.4,1110.0,1181.9,854.3,990.9,1058.0,968.2,917.8,852.9,1144.2,1177.8,1171.0,1016.8,914.6,914.6,1012.6,883.5,929.7,1013.5,713.3,410.5,474.9,0.0,346.7,1029.8,1173.3,1390.7,1645.2,2225.4,1052.1,1319.1,621.1,982.1,754.5,0.0},
				{1272.8,1274.8,1197.7,933.0,1021.2,1219.5,1282.4,1317.9,1399.5,1326.5,939.9,879.0,1272.8,1274.8,1197.7,933.0,1021.2,1219.5,1282.4,1317.9,1399.5,1326.5,939.9,879.0,1080.3,1329.8,1731.8,1535.5,1623.1,1336.2,1370.2,1398.1,1169.1,1270.5,1192.6,991.4,1111.1,689.2,693.4,927.5,883.4,988.1,1319.1,1326.5,1387.1,1221.7,1226.8,1250.5,1271.5,1405.0,1077.4,1214.0,1281.1,1191.3,1102.2,1014.5,1294.3,1351.5,1310.0,1239.9,1137.7,1137.7,1235.7,1106.6,1152.8,1236.6,936.4,633.6,516.4,384.7,0.0,944.1,1087.6,1307.9,1758.7,2448.5,1049.5,1316.5,844.2,1205.2,882.8,0.0},
				{876.9,747.4,670.3,573.7,713.7,960.0,755.0,790.5,945.5,906.3,432.4,371.5,876.9,747.4,670.3,573.7,713.7,960.0,755.0,790.5,945.5,906.3,432.4,371.5,1188.3,1132.5,1271.6,1008.1,1095.7,808.8,842.8,870.7,661.6,763.0,685.1,483.9,583.7,524.5,753.5,700.1,656.0,561.1,965.2,906.3,859.7,694.3,699.4,787.6,744.1,905.9,631.6,731.2,818.2,728.4,574.8,487.1,766.9,824.1,782.6,980.4,919.7,919.7,986.0,1114.8,1027.6,773.7,1094.5,1107.1,1158.3,960.7,821.2,0.0,173.0,800.4,1231.3,2081.8,1106.7,1267.6,607.8,1008.1,373.9,0.0},
				{1025.8,896.3,819.2,722.6,862.6,1108.9,903.9,939.4,1094.4,1055.2,581.3,520.4,1025.8,896.3,819.2,722.6,862.6,1108.9,903.9,939.4,1094.4,1055.2,581.3,520.4,1337.2,1281.4,1420.5,1157.0,1244.6,957.7,991.7,1019.6,810.5,911.9,834.0,632.8,732.6,673.4,902.4,849.0,804.9,710.0,1114.1,1055.2,1008.6,843.2,848.3,936.5,893.0,1054.8,780.5,880.1,967.1,877.3,723.7,636.0,915.8,973.0,931.5,1129.3,1068.6,1068.6,1134.9,1263.7,1176.5,922.6,1243.4,1256.0,1307.2,1109.6,970.1,172.2,0.0,949.3,1380.2,2230.7,1255.6,1416.5,756.7,1157.0,522.8,0.0},
				{924.9,795.4,718.3,755.8,810.0,1056.3,803.0,838.5,993.5,954.3,647.6,687.9,924.9,795.4,718.3,755.8,810.0,1056.3,803.0,838.5,993.5,954.3,647.6,687.9,1284.6,1180.5,1308.5,997.0,974.8,753.0,721.9,749.8,632.2,655.8,658.7,657.4,995.9,938.2,1076.2,882.2,838.1,743.2,1013.2,954.3,738.8,703.9,578.5,835.6,792.1,953.9,727.9,779.2,866.2,776.4,622.8,624.9,814.9,872.1,830.6,1076.7,1016.0,1016.0,1034.0,1162.8,1123.9,821.7,1339.3,1390.5,1481.0,1374.4,1234.9,802.6,946.1,0.0,1110.4,2129.8,1410.0,1570.9,952.2,1056.1,786.1,0.0},
				{860.6,813.6,955.0,1158.9,1030.7,998.3,821.2,634.5,717.1,661.5,1050.7,1223.0,860.6,813.6,955.0,1158.9,1030.7,998.3,821.2,634.5,717.1,661.5,1050.7,1223.0,1175.0,912.8,819.5,507.0,269.9,734.4,835.4,928.6,1024.8,1223.0,1013.5,1060.5,1399.0,1422.7,1316.4,1159.8,1241.2,1146.3,1063.5,661.5,754.7,901.5,819.4,876.8,894.5,749.9,1083.2,1010.6,969.7,983.9,1025.9,1028.0,833.1,668.1,626.0,1063.4,1046.4,1046.4,766.2,884.5,1028.6,973.8,1149.4,1200.6,1540.3,1572.3,1719.4,1266.0,1409.5,1139.9,0.0,1862.1,1813.1,1974.0,1355.3,788.3,1189.2,0.0},
				{1724.5,1650.9,1792.3,2029.5,1894.1,1860.0,1658.5,1471.8,1552.1,1370.5,2005.7,2178.0,1724.5,1650.9,1792.3,2029.5,1894.1,1860.0,1658.5,1471.8,1552.1,1370.5,2005.7,2178.0,1838.3,1349.3,1775.8,1718.1,1731.3,1643.4,2026.9,2063.2,2032.8,2166.4,2021.5,2003.9,2354.0,2377.7,1979.7,2023.2,2089.2,2017.1,1923.3,1370.5,1735.0,1738.8,1892.4,1714.1,1731.8,1587.2,1920.5,1847.9,1833.6,1821.2,1881.2,1884.7,1670.4,1505.4,1446.0,1888.3,1909.3,1909.3,1525.5,1612.3,1758.5,1811.1,1812.7,1863.9,2203.6,2235.6,2426.3,2221.0,2364.5,2218.3,1975.4,0.0,2768.1,2929.0,2203.3,1533.1,2144.2,0.0},
				{1515.6,1386.1,1309.0,1212.4,1352.4,1566.0,1393.7,1429.2,1584.2,1545.0,1146.6,1191.4,1515.6,1386.1,1309.0,1212.4,1352.4,1566.0,1393.7,1429.2,1584.2,1545.0,1146.6,1191.4,1426.8,1676.3,1910.3,1646.8,1734.4,1447.5,1481.5,1509.4,1344.4,1478.0,1333.1,1303.8,1367.4,1190.4,1080.3,1314.4,1270.3,1199.8,1603.9,1545.0,1498.4,1333.0,1338.1,1426.3,1382.8,1544.6,1270.3,1369.9,1456.9,1367.1,1213.5,1125.8,1405.6,1462.8,1421.3,1586.4,1484.2,1484.2,1582.2,1453.1,1499.3,1412.4,1282.9,980.1,810.0,1039.6,968.2,1234.4,1377.9,1509.2,1870.0,2720.5,0.0,459.7,1231.1,1551.7,1118.8,0.0},
				{1593.9,1464.4,1387.3,1290.7,1430.7,1677.0,1472.0,1507.5,1662.5,1623.3,1224.9,1269.7,1593.9,1464.4,1387.3,1290.7,1430.7,1677.0,1472.0,1507.5,1662.5,1623.3,1224.9,1269.7,1613.6,1849.5,1988.6,1725.1,1812.7,1525.8,1559.8,1587.7,1422.7,1556.3,1411.4,1382.1,1445.7,1469.4,1344.5,1417.1,1373.0,1278.1,1682.2,1623.3,1576.7,1411.3,1416.4,1504.6,1461.1,1622.9,1348.6,1448.2,1535.2,1445.4,1291.8,1204.1,1483.9,1541.1,1499.6,1697.4,1636.7,1636.7,1703.0,1639.9,1686.1,1490.7,1469.7,1244.3,1074.2,1303.8,1282.3,1312.7,1456.2,1587.5,1948.3,2798.8,395.5,0.0,1336.9,1725.1,1197.1,0.0},
				{655.3,673.4,554.6,265.0,403.7,650.0,784.7,786.2,843.3,954.3,555.9,591.6,655.3,673.4,554.6,265.0,403.7,650.0,784.7,786.2,843.3,954.3,555.9,591.6,790.3,1044.7,1313.6,1056.1,1143.7,856.8,890.8,918.7,753.7,887.3,742.4,704.0,689.6,791.3,283.8,259.5,215.4,320.1,701.6,954.3,907.7,742.3,747.4,582.5,665.1,737.0,409.4,546.0,613.1,523.3,472.9,408.0,699.3,732.9,815.4,670.4,609.7,609.7,934.6,821.5,717.6,568.6,624.8,637.4,688.6,583.7,774.4,634.6,778.1,918.5,1279.3,2129.8,1197.2,1358.1,0.0,898.5,310.3,0.0},
				{383.1,482.7,656.3,784.4,519.4,485.3,522.7,336.0,313.8,242.6,869.9,1042.2,383.1,482.7,656.3,784.4,519.4,485.3,522.7,336.0,313.8,242.6,869.9,1042.2,524.3,207.7,647.9,543.4,540.3,507.6,891.1,927.4,897.0,1030.6,885.7,868.1,1218.2,1241.9,665.7,648.5,747.2,767.9,548.6,242.6,599.2,603.0,756.6,500.7,558.2,381.3,623.9,647.7,463.6,607.9,691.1,723.2,534.6,363.2,310.2,529.5,535.1,535.1,151.8,262.9,399.7,597.8,498.7,549.9,889.6,921.6,1112.3,1085.2,1228.7,1082.5,784.4,1326.4,1555.8,1737.3,890.9,0.0,1008.4,0.0},
				{791.2,661.7,584.6,437.1,575.8,822.1,669.3,704.8,859.8,820.6,404.3,375.8,791.2,661.7,584.6,437.1,575.8,822.1,669.3,704.8,859.8,820.6,404.3,375.8,912.3,1046.8,1185.9,922.4,1010.0,723.1,757.1,785.0,620.0,753.6,608.7,488.2,391.1,525.8,405.8,431.6,387.5,447.1,873.7,820.6,774.0,608.6,613.7,701.9,658.4,820.2,545.9,645.5,732.5,642.7,489.1,401.4,681.2,738.4,696.9,842.5,781.8,781.8,900.3,943.5,889.7,688.0,746.8,759.4,810.6,705.7,822.5,418.8,562.3,784.8,1145.6,1996.1,1021.0,1181.9,310.2,922.4,0.0,0.0}};
}


    /*	Route route= new Route();
    	double toDrivetoIntersection=0;
    	double[] durations;
    	ArrayList <City>Nodes;
    	ArrayList <City>Intersections;
	TimeElement	lastEventTime= new TimeElement();
		int hour= lastEventTime.getHour();																//current hour
		double ttnh=lastEventTime.getTimeToNextHour();
		City c1= new City("1","City", 8.397889,49.06864);
		City c2= new City("2","City", 8.390443,49.013294);
		City c3= new City("3","City", 8.391678,49.014275);
		City c4= new City("4","City", 8.411368,49.020199);
		City c5= new City("5","City", 8.434368,49.012229);
		City lastCity=c1;
		Population pop = new Population(10,false);
		
		
		ArrayList<City> abc= new ArrayList<City>();
		ArrayList<City> cba= new ArrayList<City>();

		abc.add(c1);
		abc.add(c2);
		abc.add(c3);
		abc.add(c4);
		abc.add(c5);
		cba.add(c1);
		cba.add(c2);
		cba.add(c3);
		cba.add(c5);
		cba.add(c4);
		Tour best= new Tour(abc);
		pop.saveTour(0,best);
		for(int i=1; i<10;i++) {
			Tour t= new Tour(cba);
			pop.saveTour(i, t);
		}
		route.WayFromTo(best);
		durations=route.Duration;
		
		Nodes=route.Nodes_as_City;
		Intersections=route.intersections;
		//Passe Start und End IntersectionCity an damit gleichheit mit All_Cities und tour besteht,
		//sowie start und end node	aus dem gleichen Ziel
		//Berechne duration für neuen Start und End Node über Approximation

		double lat_ratio_start=(Nodes.get(1).getLatitude()-Intersections.get(0).getLatitude())/(Nodes.get(1).getLatitude()-Nodes.get(0).getLatitude());	
		double lon_ratio_start=(Nodes.get(1).getLongitude()-Intersections.get(0).getLongitude())/(Nodes.get(1).getLongitude()-Nodes.get(0).getLongitude());
		double avg_ratio_start= (lat_ratio_start+lon_ratio_start)/2;  
		durations[0]=durations[0]*avg_ratio_start;
		Intersections.set(0,best.getCity(1));
		Nodes.set(0, Intersections.get(0)); //e.location == City "City"
		
		double lat_ratio_end=(Nodes.get(Nodes.size()-1).getLatitude()-Intersections.get(Intersections.size()-1).getLatitude())/(Nodes.get(Nodes.size()-1).getLatitude()-Nodes.get(Nodes.size()-2).getLatitude());	
		double lon_ratio_end=(Nodes.get(Nodes.size()-1).getLongitude()-Intersections.get(Intersections.size()-1).getLongitude())/(Nodes.get(Nodes.size()-1).getLongitude()-Nodes.get(Nodes.size()-2).getLongitude());
		double avg_ratio_end= (lat_ratio_end+lon_ratio_end)/2;
		durations[durations.length-1]=durations[durations.length-1]*avg_ratio_end;
		Intersections.set(Intersections.size()-1,best.getCity(2));
		Nodes.set(Nodes.size()-1, Intersections.get(Intersections.size()-1));
		//RouteServiceEvent event= new RouteServiceEvent(this, Nodes,Intersections, durations,best);
	//	fireEvent(event);
		for ( int t =0; t<pop.populationSize();t++) {
			
			if(Intersections.get(1).getType()=="Intersection"){
				//Wenn Intersection auf Strecke, was fast immer der Fall ist, füge diese in Tour an zweiter Position ein
				pop.getTour(t).addatPosition(1,Intersections.get(1));
			}
			//Wenn nicht passe Tour an, dass nächste Stadt aus Route Request aufjedenfall besucht wird
			else {
				int delete=pop.getTour(t).positionofCity(best.getCity(2));
				pop.getTour(t).deleteCity(delete);
				pop.getTour(t).addatPosition(1, best.getCity(2));
			}
		}
		if(Intersections.get(1).getType()=="Intersection"){
			All_Cities.addCity(Intersections.get(1));
			//Distanzmatrix.updateAllMatrix();
		}
		lastCity=Distanzmatrix.startCity;
		if(Intersections.get(1).getType()=="City") {  //falls keine Intersection auf der Strecke liegt, außer Start und Zielstadt
			for(int n=0; n<Nodes.size()-1;n++) {
				if(toDrivetoIntersection+durations[n]*Maths.getFaktor(hour)>ttnh) {
					double tohour=ttnh-durations[n]*Maths.getFaktor(hour);		;									//calculate the time from sum to next hour
					double hourratio= tohour/durations[n]*Maths.getFaktor(hour);									// Calculate ratio of driven way in this section
					toDrivetoIntersection+=hourratio*durations[n]*Maths.getFaktor(hour)+(1-hourratio)*durations[n]*Maths.getFaktor(hour+1);		//multiply ratio with value*factor of past hour and the reverse ratio with the value*factor of upcoming hour
					ttnh+=3600;	
					hour+=1;
					if(hour==24) {
						hour=0;
					}
				
				}
				else {
					toDrivetoIntersection+=durations[n]*Maths.getFaktor(hour);
				}
			}
		}
		
		else {
			for(int n=0; n<Nodes.size()-1;n++) {
				if(Nodes.get(n).getId()==Intersections.get(1).getId()) {		//Sobald Node gefunden der gleich der ersten Intersection ist, stoppe
					break;
				}
				else {
					if(toDrivetoIntersection+durations[n]*Maths.getFaktor(hour)>ttnh) {
						double tohour=ttnh-durations[n]*Maths.getFaktor(hour);		;									//calculate the time from sum to next hour
						double hourratio= tohour/durations[n]*Maths.getFaktor(hour);									// Calculate ratio of driven way in this section
						toDrivetoIntersection+=hourratio*durations[n]*Maths.getFaktor(hour)+(1-hourratio)*durations[n]*Maths.getFaktor(hour+1);		//multiply ratio with value*factor of past hour and the reverse ratio with the value*factor of upcoming hour
						ttnh+=3600;	
						hour+=1;
						if(hour==24) {
							hour=0;
						}
					
					}
					else {
						toDrivetoIntersection+=durations[n]*Maths.getFaktor(hour);
					}
				}
			}
		}
		for(int as=0;as<Intersections.size();as++) {
			System.out.print("I"+as+": "+Intersections.get(as).getId()+ " "+Intersections.get(as).getType()+Intersections.get(as).getLongitude()+ " "+Intersections.get(as).getLatitude()+"     ");
		}
		System.out.println();
		for(int as=0;as<Nodes.size();as++) {
			System.out.print("N"+as+": "+Nodes.get(as).getId()+ " "+Nodes.get(as).getType()+Nodes.get(as).getLongitude()+ " "+Nodes.get(as).getLatitude()+"     ");
		}
		System.out.println();
		for(int as=0;as<durations.length;as++) {
			System.out.print("dur"+as+": "+durations[as]+ " ");
		}
		System.out.println("to drive to Intersection "+toDrivetoIntersection);
    }
}
		/*Route r = new Route();
		ArrayList<City> abc= new ArrayList<City>();
		City c1= new City(1,"City", 13.388802,52.517033);
		City c2= new City(2,"City", 13.397621,52.529432);
		City c3= new City(3,"City", 13.375621,52.519432);
		abc.add(c1);
		abc.add(c2);
		abc.add(c3);
				
		Tour best= new Tour(abc);
		try {
			r.WayFromTo(best);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	
	
*/


		
		
		
		
		
		
		
		
		
		/*double[] duration= new double[] {501,312,514,652,23,817,800,21,45,112,193};
		GammaVerteilung Gamma= new GammaVerteilung();
		Zeitfaktoren faktoren= new Zeitfaktoren();
		double[] gammaDuration= new double[duration.length];												//Array for Gamma influenced values
		double sumD=0;
		double sumGd=0;
		for(int i=0; i<duration.length;i++) {													//Loop through duration values and use gamma function
			gammaDuration[i]=Gamma.goGamma(duration[i], 0.5, 0.5, 0.5);	
			sumD+=duration[i];
			sumGd+=gammaDuration[i];
		}
		
		TimeElement now= new TimeElement();
		double durationSumZFEA=0;																//Sum of gamma and time factor influenced values looped
		double[] ZF_EA_duration= new double[gammaDuration.length];										//Array for final values for Simulation, gamma and time factor influenced
		int hour= now.getHour();																//actual hour
		double ttnh=now.getTimeToNextHour();													// Duration to next hour in seconds
		System.out.println(ttnh);	
		for(int j=0; j<gammaDuration.length;j++) {											//Loop through Gamma 
				
				if(durationSumZFEA+gammaDuration[j]*faktoren.getFaktor(hour)>ttnh) {			//If the sum of the values + the actual value is bigger than the time to the next hour
					double tohour=ttnh-durationSumZFEA		;									//calculate the time from sum to next hour
					double ratio= tohour/gammaDuration[j]*faktoren.getFaktor(hour);				// Calculate ratio of driven way in this section
					
					
					

					ZF_EA_duration[j]=ratio*gammaDuration[j]*faktoren.getFaktor(hour)+(1-ratio)*gammaDuration[j]*faktoren.getFaktor(hour+1);		//multiply ratio with value*factor of past hour and the reverse ratio with the value*factor of upcoming hour
					ttnh+=3600;																	// add 3600 seconds to timetonexthour
					durationSumZFEA+=ZF_EA_duration[j];											//Update Sum 
					hour+=1;
					if(hour==24) {
						hour=0;
					}
					System.out.println("WECHSEL");													//Update time factor
					
				}
				else {																			// If actual step is within the same hour
					ZF_EA_duration[j]=gammaDuration[j]*faktoren.getFaktor(hour);				//multiply value with time factor
					durationSumZFEA+=ZF_EA_duration[j];		
					System.out.println("Kein WECHSEL"+ ZF_EA_duration[j]);	//Update Sum
				}
			}	
		
		for(int f=0;f<duration.length;f++) {
			System.out.print(duration[f]+"    ");
			System.out.print(gammaDuration[f]+"    ");
			System.out.print(ZF_EA_duration[f]+"    ");
			System.out.println();
			
			
		}
		
		System.out.println(sumD);
		System.out.println(sumGd);
		System.out.println(durationSumZFEA);*/
	






/*Thread t = new Thread()
{
  @Override public void run()
  {
    try
    {
      while ( true ) System.out.println( "I Like To Move It." );
    }
    catch ( ThreadDeath td )
    {
      System.out.println( "Das Leben ist nicht totzukriegen." );
      throw td;
    }
  }
};
t.start();
try { Thread.sleep( 5000 ); } catch ( Exception e ) { }
t.stop();
System.out.println();
System.out.println("ficken");*/